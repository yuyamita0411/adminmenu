[{"/templates/admin_vue/src/main.ts":"1","/templates/admin_vue/src/App.vue":"2","/templates/admin_vue/src/store/common/index.ts":"3","/templates/admin_vue/src/router/index.ts":"4","/templates/admin_vue/src/views/HomeView.vue":"5","/templates/admin_vue/src/views/editMenu.vue":"6","/templates/admin_vue/src/views/articleLists.vue":"7","/templates/admin_vue/src/components/Modal.vue":"8","/templates/admin_vue/src/components/icon/loadingIcon.vue":"9","/templates/admin_vue/src/module/prop.ts":"10","/templates/admin_vue/src/module/function.ts":"11","/templates/admin_vue/src/module/editMenu/index.ts":"12","/templates/admin_vue/src/views/categoryList.vue":"13","/templates/admin_vue/src/views/categoryDetail.vue":"14","/templates/admin_vue/src/views/commonInfo.vue":"15","/templates/admin_vue/src/components/editMenu/ImageUploader.vue":"16"},{"size":253,"mtime":1711075247063,"results":"17","hashOfConfig":"18"},{"size":3619,"mtime":1720262548254,"results":"19","hashOfConfig":"18"},{"size":1517,"mtime":1719629193827,"results":"20","hashOfConfig":"18"},{"size":1083,"mtime":1720259162460,"results":"21","hashOfConfig":"18"},{"size":21870,"mtime":1720366178180,"results":"22","hashOfConfig":"18"},{"size":22934,"mtime":1720343031916,"results":"23","hashOfConfig":"18"},{"size":6019,"mtime":1720262174323,"results":"24","hashOfConfig":"18"},{"size":4516,"mtime":1712792480426,"results":"25","hashOfConfig":"18"},{"size":4485,"mtime":1711587094674,"results":"26","hashOfConfig":"18"},{"size":8491,"mtime":1720368363177,"results":"27","hashOfConfig":"18"},{"size":1543,"mtime":1711641406608,"results":"28","hashOfConfig":"18"},{"size":405,"mtime":1711490426493,"results":"29","hashOfConfig":"18"},{"size":9602,"mtime":1720262261896,"results":"30","hashOfConfig":"18"},{"size":2643,"mtime":1720369263762,"results":"31","hashOfConfig":"18"},{"size":7503,"mtime":1720262289938,"results":"32","hashOfConfig":"18"},{"size":4134,"mtime":1720343043430,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ll0zfj",{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},"/templates/admin_vue/src/main.ts",[],"/templates/admin_vue/src/App.vue",[],"/templates/admin_vue/src/store/common/index.ts",[],"/templates/admin_vue/src/router/index.ts",[],"/templates/admin_vue/src/views/HomeView.vue",["71","72"],"<template>\n    <div class=\"content-wrapper\">\n        <div\n        v-for=\"(value, key, index) in jsondata\"\n        :key=\"key\"\n        >\n        <AddTaskModal v-if=\"showChild\" @ReRender=\"toggle\"></AddTaskModal>\n            <div\n            v-if=\"tag.getElementTag(key)\"\n            class=\"editelem\">\n                <div\n                :class=\"getPaddingClass(key, index)\"\n                >\n                    <div\n                    v-if=\"isImageKey(key)\"\n                    >\n                        <ImageUploader\n                            :key=\"`uploader-${key}`\"\n                            :jsonkey=\"key\"\n                            :imgUpdir=\"uploadpath\"\n                            :initialImageUrl=\"getFullImageUrl(value)\"\n                            :isDragging=\"isDragging\"\n                            :isval=\"value\"\n                            :imgsrc=\"getFullImageUrl(value)\"\n                            @updateImageUrl=\"updateImageUrl(key, $event)\"\n                            @updateDraggingState=\"updateDraggingState\"\n                            @onFileChange=\"handleFileChange(key, $event)\"\n                            ref=\"imageUploaders\"\n                        />\n                    </div>\n                    <div\n                    v-else\n                    >\n                        <span\n                            v-if=\"!EditingTargetIndex[index]\"\n                            :index=\"index\"\n                            :data-itemkey=\"key\"\n                            :class=\"tag.getElementTagLabel(key)\"\n                            @click=\"clickTagButton($event, key)\"\n                            style=\"min-height:1.5rem;\"\n                            v-html=\"displayArticleHTML(key, value)\"\n                        >\n                        </span>\n                        <textarea\n                            v-else\n                            :class=\"tag.getElementTagLabel(key)\"\n                            :value=\"inputValues[key]\"\n                            :style=\"textareaStyle\"\n                            @input=\"handleInput($event, key)\"\n                        >\n                        </textarea>\n                    </div>\n                </div>\n                <div\n                    @mouseover=\"mouseOverButton\"\n                    @mousemove=\"mouseOverButton\"\n                    @mouseout=\"mouseOutButton\"\n                    :index=\"index\"\n                    class=\"addcontent-wrapper position-absolute\"\n                >\n                    <button\n                    @click=\"addBlockFunc\"\n                    class=\"addcontentbutton position-absolute\"\n                    ><img\n                    :index=\"index\"\n                    @mouseover=\"mouseOverButton\"\n                    @mousemove=\"mouseOverButton\"\n                    @mouseout=\"mouseOutButton\"\n                    :style=\"addButtonStyle(index)\"\n                    :src=\"addcontenticon\"\n                    :data-plusnum=\"index+1\"></button>\n                    <span class=\"addcontent-border bottom-border\"></span>\n                </div>\n                <button\n                v-if=\"key != 'pagetitle'\"\n                class=\"trashbutton position-absolute\">\n                    <img\n                    :src=\"trashicon\"\n                    @click=\"deleteElement(key)\"\n                    >\n                </button>\n            </div>\n        </div>\n        <div class=\"meta-setting-area\">\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">タイトル</div>\n                <textarea\n                :class=\"tag.getTagLabel('pagetitle')\"\n                @input=\"genericInput($event, 'pagetitle')\"\n                :value=\"jsondata['pagetitle']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">ディスクリプション</div>\n                <textarea\n                :class=\"tag.getTagLabel('description')\"\n                @input=\"genericInput($event, 'description')\"\n                :value=\"jsondata['description']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">thumbnail</div>\n                <textarea\n                :class=\"tag.getTagLabel('thumbnail')\"\n                @input=\"genericInput($event, 'thumbnail')\"\n                :value=\"jsondata['thumbnail']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">ogImg</div>\n                <textarea\n                :class=\"tag.getTagLabel('ogImg')\"\n                @input=\"genericInput($event, 'ogImg')\"\n                :value=\"jsondata['ogImg']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">投稿日</div>\n                <textarea\n                :class=\"tag.getTagLabel('created_at')\"\n                @input=\"genericInput($event, 'created_at')\"\n                :value=\"jsondata['created_at']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">更新日</div>\n                <textarea\n                :class=\"tag.getTagLabel('updated_at')\"\n                @input=\"genericInput($event, 'updated_at')\"\n                :value=\"jsondata['updated_at']\"\n                ></textarea>\n            </div>\n        </div>\n        <div class=\"submitButtonWrapper\">\n            <div class=\"submitButtonInner\">\n                <button\n                class=\"submitButton button_blue\"\n                @click=\"updateJsonData\"\n                >更新する</button>\n            </div>\n        </div>\n        <div class=\"mb2rem\">\n            <h2>翻訳する</h2>\n            <h3>翻訳に失敗した言語、まだ翻訳が済んでない言語一覧</h3>\n            <div>\n                <div\n                v-for=\"(value, key) in lnarr\"\n                :key=\"key\"\n                class=\"d-inline-block float-left w-auto\"\n                >\n                    <span\n                    v-if=\"translateLnArr.includes(value)\"\n                    >{{key}},</span>\n                </div>\n            </div>\n            <h3>言語を選ぶ</h3>\n            <div\n            v-for=\"(value, key) in lnarr\"\n            :key=\"key\"\n            class=\"translate-language-area d-inline-block float-left w-auto\"\n            >\n                <input\n                v-if=\"!translateLnArr.includes(value)\"\n                type=\"checkbox\" :id=\"value\" :value=\"value\"\n                v-model=\"translateLnArr\">\n                <input\n                v-else\n                type=\"checkbox\" :id=\"value\" :value=\"value\"\n                v-model=\"translateLnArr\"\n                checked\n                >\n                <label :for=\"value\">{{key}}</label>\n            </div>\n            <div class=\"submitButtonInner pt1rem pb1rem\">\n                <button\n                class=\"translationButton button_blue\"\n                @click=\"checkall\"\n                >全てにチェックを入れる</button>\n                <button\n                class=\"translationButton button_blue\"\n                @click=\"unCheckall\"\n                >全てのチェックを外す</button>\n                <button\n                class=\"translationButton button_blue\"\n                @click=\"checkTranslateSuccess\"\n                >翻訳できてない箇所のみ</button>\n            </div>\n            <div class=\"submitButtonInner\">\n                <button\n                class=\"translationButton button_pink\"\n                @click=\"translateJsonData('ChatGpt')\"\n                >ChatGPT</button>\n                <button\n                class=\"translationButton button_navy\"\n                @click=\"translateJsonData('GoogleAPI')\"\n                >Google Translate</button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from \"vue-class-component\";\nimport { mapState } from 'vuex';\n\nimport {store} from '../store/common/index';\nimport { PATH, TAG, lnarr, fullLinArr } from '../module/prop';\nimport { API } from '../module/function';\nimport { Menu } from '../module/editMenu/index';\nimport { GenericObject } from '../module/type';\n\nimport ImageUploader from '../components/editMenu/ImageUploader.vue';\ninterface ImageUploaderComponent extends Vue {\n  jsonkey: string;\n  file: File | null;\n}\n\n@Options({\n    computed: {\n        ...mapState(['modalStatus', 'jsondata', 'HoverTargetIndex', 'EditingTargetIndex', 'isLoading']),\n        EditingTargetIndex() {\n            return store.state.EditingTargetIndex;\n        },\n        HoverTargetIndex() {\n            return store.state.HoverTargetIndex;\n        },\n        isLoading() {\n            return store.state.isLoading;\n        }\n    },\n    components: {\n        ImageUploader\n    }\n})\n\nexport default class HomeView extends Vue {\n    path: PATH = new PATH();\n    tag: TAG = new TAG();\n    menu: Menu = new Menu();\n\n    textareaStyle!: string;\n    inputValues: {\n        [key: string]: GenericObject;\n    } = {};\n    fields = this.menu.fields;\n\n    displayTrash = 'hide-trash';\n    addcontenticon = this.path.addcontenticon;\n    trashicon = this.path.trashicon;\n    touchtag: GenericObject = {};\n    catListArr: GenericObject = {};\n    lnarr: GenericObject = lnarr;\n    fullLinArr: GenericObject = fullLinArr;\n    translateLnArr: string[] = [];\n    selectedCategoryID = null;\n    isDragging = false;\n    uploadpath = '';\n\n    created () {\n        //初期のデータを定義\n        this.readData();\n        //編集中のタグ情報の状態を初期化\n        this.resetObj(store.state.jsondata, 'updateStoreObj', 'EditingTargetIndex');\n        this.checkTranslateSuccess();\n        this.inputValues = store.state.jsondata;\n        this.selectedCategoryID = store.state.jsondata[\"categoryID\"];\n        this.uploadpath = `${process.env.VUE_APP_homeDirPath}/img/`\n    }\n    readData() {\n        API.post (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_fileReadEndpoint}`,\n            {filePath: `${process.env.VUE_APP_homeDirPath}${this.$route.path}/index.json`},\n            (response: GenericObject) => {\n                store.commit('setJsonData', response.data);\n                this.selectedCategoryID = store.state.jsondata[\"categoryID\"];\n            }\n        );\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_categoryDetailDirectory}`,\n            { filePath: `${process.env.VUE_APP_listupPath}/category/ja/index.json`},\n            (response: GenericObject) => {\n                this.catListArr = JSON.parse(response.data.data);\n            }\n        );\n    }\n    async updateJsonData () {\n        this.ModifyJsonFile (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_fileEndpoint}`,\n            `${process.env.VUE_APP_homeDirPath}${this.$route.path}/index.json`\n        );\n        this.ModifyJsonFile (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_UpdateDirContentEndpoint}`,\n            \"dummy\"\n        );\n\n        // 画像アップロード関連\n        const uploadPromises: Promise<any>[] = [];\n        const imageUploaders = this.$refs.imageUploaders as unknown as ImageUploaderComponent[];\n        \n        for (const key in store.state.jsondata) {\n            if (this.isImageKey(key)) {\n                const uploader = imageUploaders.find((uploader) => uploader.jsonkey === key);\n                if (uploader && uploader.file) {\n                    const formData = new FormData();\n                    formData.append('file', uploader.file);\n                    formData.append('jsonkey', key);\n                    formData.append('filePath', store.state.jsondata[key]);\n                    uploadPromises.push(\n                        fetch(`${store.state.pageinfo.base_url}${process.env.VUE_APP_uploadimg}`, {\n                            method: 'POST',\n                            body: formData,\n                        }).then(response => response.json())\n                    );\n                }\n            }\n        }\n\n        const results = await Promise.all(uploadPromises);\n        results.forEach(result => {\n            if (result.success) {\n                store.commit('updateStoreObj', {\n                    target: 'jsondata',\n                    key: result.jsonkey,\n                    value: result.filepath,\n                });\n            }\n        });\n    }\n    translateJsonData (whichlng: string) {\n        //ChatGpt,GoogleAPI\n        const checkedElements = this.$el.querySelectorAll('.translate-language-area input[type=\"checkbox\"]:checked');\n        this.translateLnArr = Array.from(checkedElements).map(el => (el as HTMLInputElement).value);\n        API.post (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_fileTranslateEndpoint}`,\n            {\n                fileData: store.state.jsondata,\n                filePath: `${process.env.VUE_APP_homeDirPath}${this.$route.path}/index.json`,\n                translateLanguageArr: this.translateLnArr,\n                whichlng: whichlng\n            },\n            (response: GenericObject) => {\n                console.log(response.data);\n            }\n        );\n    }\n    checkTranslateSuccess () {\n        this.translateLnArr = [];\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_checkFailTranslate}`,\n            { directory: `${process.env.VUE_APP_homeDirPath}/language`},\n            (response: GenericObject) => {\n                for (let key in this.lnarr) {\n                    if (!response.data.data.includes(this.lnarr[key])) {\n                        this.translateLnArr.push(this.lnarr[key]);\n                    }\n                }\n            }\n        );\n    }\n    checkall () {\n        this.translateLnArr = [];\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_checkFailTranslate}`,\n            { directory: `${process.env.VUE_APP_homeDirPath}/language`},\n            (response: GenericObject) => {\n                for (let key in this.lnarr) {\n                    this.translateLnArr.push(this.lnarr[key]);\n                }\n            }\n        );\n    }\n    unCheckall () {\n        this.translateLnArr = [];\n    }\n    onDragOver() {\n        this.isDragging = true;\n    }\n    onDragLeave() {\n        this.isDragging = false;\n    }\n    updateDraggingState(isDragging: boolean) {\n        this.isDragging = isDragging;\n    }\n    updateImageUrl(key: string, url: string) {\n        store.commit('updateStoreObj', { target: 'inputValues', key: key, value: url });\n        store.commit('updateStoreObj', { target: 'jsondata', key: key, value: url });\n    }\n    private clickTagButton (e: Event, key: string) {//今クリックしたタグの情報を更新する。状態管理はupdateTargetTagInfoが実行されtargetTagInfoが更新される。\n        const target = e.target as HTMLElement\n        //編集中のタグ情報の状態を更新\n        this.resetObj(store.state.jsondata, 'updateStoreObj', 'EditingTargetIndex');\n        store.commit('updateStoreObj', { target: 'EditingTargetIndex', key: Number(target.getAttribute('index')), value: true });\n        store.dispatch('TargetIndexProperty');\n        this.inputValues = store.state.jsondata;\n        this.touchtag = this.isImgTag(this.tag.getElementTagLabel(key));\n        //テキストエリアの高さを合わせる\n        this.setTagHeight(target);\n    }\n    private handleInput (e: Event, key: string) {\n        const target = e.target as HTMLTextAreaElement;\n        this.setInputHeight(target);\n        store.state.jsondata[key] = target.value;\n        store.commit('setJsonData', store.state.jsondata);\n    }\n    private genericInput(e: Event, key: string) {\n        const target = e.target as HTMLTextAreaElement;\n        store.commit('changeJsonData', { key, value: target.value });\n    }\n    private addBlockFunc (e: MouseEvent) {\n        const target = e.target as HTMLElement\n        store.commit('updateStoreObj', { target: 'modalStatus', key: 'modalClassName', value: 'modal-show' });\n        store.commit('updateStoreObj', { target: 'modalStatus', key: 'modalWrapperClassName', value: 'modal-wrapper-show' });\n        store.commit('updateStoreObj', { target: 'modalStatus', key: 'bottom', value: `calc(100vh - 5rem - ${e.clientY}px)` });\n        store.commit('updateVariableState', { key: 'nexttagNum', value: target.dataset.plusnum });\n    }\n    private mouseOverButton (e: Event) {\n        const target = e.target as HTMLTextAreaElement;\n        this.resetObj(store.state.HoverTargetIndex, 'updateStoreObj', 'HoverTargetIndex');\n        store.commit('updateStoreObj', { target: 'HoverTargetIndex', key: Number(target.getAttribute('index')), value: true });\n        store.dispatch('TargetIndexProperty');\n    }\n    private mouseOutButton () {\n        this.resetObj(store.state.HoverTargetIndex, 'updateStoreObj', 'HoverTargetIndex');\n        store.dispatch('TargetIndexProperty');\n    }\n    private resetObj (jsondata:GenericObject, commit: string, target: string) {\n        Object.keys(jsondata).forEach((obj: string, i: number) => {\n            store.commit(commit, { target: target, key: i, value: false });\n        });\n    }\n    private TargetIndexProperty() {\n      return store.state.EditingTargetIndex\n    }\n    private HoverIndexProperty() {\n      return store.state.HoverTargetIndex\n    }\n    private deleteElement(key: string) {\n        delete store.state.jsondata[key];\n        store.commit('setJsonData', store.state.jsondata);\n    }\n    private isLoading() {\n      return store.state.isLoading\n    }\n    private ModifyJsonFile (endpoint: string, filepath: string) {\n        store.dispatch('isLoading');\n        API.post (\n            endpoint,\n            {\n                fileData: store.state.jsondata,\n                filePath: filepath\n            },\n            (response: GenericObject) => {\n                console.log(response.data);\n            }\n        );\n    }\n\n    /***** html *****/\n    private setTagHeight (target: HTMLElement) {\n        this.textareaStyle = '';\n        if (!this.touchtag[\"isimg\"]) {\n            this.textareaStyle = `height: ${target.offsetHeight}px; margin-bottom: 0;`;\n        }\n    }\n    private setInputHeight (target: HTMLElement) {\n        target.style.height = 'auto';\n        if (!this.touchtag[\"isimg\"]) {\n            target.style.height = `${target.scrollHeight}px`;\n        }\n    }\n    private addButtonStyle (index: number) {\n        if (store.state.HoverTargetIndex[index]) {\n            return 'opacity:1; transition: all .5s;';\n        }\n        return 'opacity:0; transition: all .5s;';\n    }\n    private getPaddingClass(key: string, index: number) {\n        let classname = \"\";\n        const entries = Object.entries(store.state.jsondata);\n        if (0 < index) {\n            if (this.tag.getElementTagLabel(key) === 'for-p') {\n                classname = `p-${this.tag.getElementTagLabel( entries[index - 1][0])}`\n            } else {\n                classname = `div-${this.tag.getElementTagLabel(key)}`;\n            }\n        }\n        return classname;\n    }\n    private isImgTag (tagname: string) {\n        let wclass = this.tag.tagjson[tagname] ? this.tag.tagjson[tagname] : '';\n        let isimg = this.tag.tagjson[tagname] ? true : false;\n        return {\"isimg\": isimg, \"wclass\": wclass}\n    }\n    private isImageKey(key: string): boolean {\n        let prop = this.isImgTag(this.tag.getElementTagLabel(key));\n        return prop[\"isimg\"];\n    }\n    private getFullImageUrl(value: string): string {\n        return `${process.env.VUE_APP_website_path}${value}`;\n    }\n    private displayArticleHTML (key: string, value: string) {\n        let prop = this.isImgTag(this.tag.getElementTagLabel(key));\n        return !prop[\"isimg\"] ? value : `<img src='${process.env.VUE_APP_website_path}${value}' class='${prop[\"wclass\"]}'>`;\n    }\n}\n</script>\n<style lang=\"scss\" scoped>\n.content-wrapper {\n    .editelem {\n        width: 100%;\n        float: left;\n        margin: 1rem .5rem;\n        position: relative;\n        div {\n            width: 98%;\n            textarea {\n                border: none;\n                background: rgb(0, 0, 0, 0.05);\n            }\n        }\n        div:not(.addcontent-wrapper) {\n            margin: 0 auto;\n            float: left;\n            width: 100%;\n            position: relative;\n        }\n    }\n    .editelem > * {\n        cursor: pointer;\n    }\n}\n.meta-label-wrapper {\n    textarea {\n        font-size: 1rem;\n        padding: .5rem 0 0 .5rem;\n        width: 100%;\n    }\n}\n.meta-setting-area {\n    margin: 1rem auto;\n    padding: 0 .5rem;\n    .meta-label-wrapper {\n        margin-bottom: 1rem;\n    }\n}\n.meta-setting-area .meta-label-wrapper,\n.meta-setting-area {\n    display: inline-block;\n    width: 100%;\n}\n\nh2,\n.for-h2 {\n    font-size: 1.5rem;\n    margin: 0 0 .5rem 0;\n}\n\nh3,\n.for-h3,\n.for-box-h3 {\n    font-size: 1.17rem;\n    margin: 0 0 .5rem 0;\n}\n\nh4,\n.for-h4 {\n    font-size: 1.05rem;\n    margin: 0 0 .5rem 0;\n}\n\np,\n.for-p,\n.for-box-description {\n    font-size: 1rem;\n    margin: 0 0 .5rem 0;\n}\n\n.p-for-h2 {\n    padding-left: 1rem;\n}\n.div-for-h3 {\n    padding-left: 1rem;\n}\n.p-for-h3 {\n    padding-left: 2rem;\n}\n.div-for-h4 {\n    padding-left: 2rem;\n}\n.p-for-h4 {\n    padding-left: 3rem;\n}\n.div-for-h5 {\n    padding-left: 3rem;\n}\n.p-for-h5 {\n    padding-left: 4rem;\n}\n.div-for-h6 {\n    padding-left: 4rem;\n}\n.p-for-h6 {\n    padding-left: 5rem;\n}\n.display-addbutton,\n.display-trash {\n    opacity: 1;\n}\n.hide-addbutton,\n.hide-trash {\n    opacity: 0;\n}\n.display-addbutton,\n.hide-addbutton,\n.display-trash,\n.hide-trash {\n    transition: all .3s;\n}\n.addcontentbutton,\n.addcontentbutton img {\n    cursor: pointer;\n}\n</style>","/templates/admin_vue/src/views/editMenu.vue",["73","74"],"<template>\n    <div class=\"content-wrapper\">\n        <div\n        v-for=\"(value, key, index) in jsondata\"\n        :key=\"key\"\n        >\n        <AddTaskModal v-if=\"showChild\" @ReRender=\"toggle\"></AddTaskModal>\n            <div\n            v-if=\"tag.getElementTag(key)\"\n            class=\"editelem\">\n                <div\n                :class=\"getPaddingClass(key, index)\"\n                >\n                    <div\n                    v-if=\"isImageKey(key)\"\n                    >\n                        <ImageUploader\n                            :key=\"`uploader-${key}`\"\n                            :jsonkey=\"key\"\n                            :imgUpdir=\"uploadpath\"\n                            :initialImageUrl=\"getFullImageUrl(value)\"\n                            :isDragging=\"isDragging\"\n                            :isval=\"value\"\n                            :imgsrc=\"getFullImageUrl(value)\"\n                            @updateImageUrl=\"updateImageUrl(key, $event)\"\n                            @updateDraggingState=\"updateDraggingState\"\n                            @onFileChange=\"handleFileChange(key, $event)\"\n                            ref=\"imageUploaders\"\n                        />\n                    </div>\n                    <div\n                    v-else\n                    >\n                        <span\n                            v-if=\"!EditingTargetIndex[index]\"\n                            :index=\"index\"\n                            :data-itemkey=\"key\"\n                            :class=\"tag.getElementTagLabel(key)\"\n                            @click=\"clickTagButton($event, key)\"\n                            style=\"min-height:1.5rem;\"\n                            v-html=\"displayArticleHTML(key, value)\"\n                        >\n                        </span>\n                        <textarea\n                            v-else\n                            :class=\"tag.getElementTagLabel(key)\"\n                            :value=\"inputValues[key]\"\n                            :style=\"textareaStyle\"\n                            @input=\"handleInput($event, key)\"\n                        >\n                        </textarea>\n                    </div>\n                </div>\n                <div\n                    @mouseover=\"mouseOverButton\"\n                    @mousemove=\"mouseOverButton\"\n                    @mouseout=\"mouseOutButton\"\n                    :index=\"index\"\n                    class=\"addcontent-wrapper position-absolute\"\n                >\n                    <button\n                    @click=\"addBlockFunc\"\n                    class=\"addcontentbutton position-absolute\"\n                    ><img\n                    :index=\"index\"\n                    @mouseover=\"mouseOverButton\"\n                    @mousemove=\"mouseOverButton\"\n                    @mouseout=\"mouseOutButton\"\n                    :style=\"addButtonStyle(index)\"\n                    :src=\"addcontenticon\"\n                    :data-plusnum=\"index+1\"></button>\n                    <span class=\"addcontent-border bottom-border\"></span>\n                </div>\n                <button\n                v-if=\"key != 'pagetitle'\"\n                class=\"trashbutton position-absolute\">\n                    <img\n                    :src=\"trashicon\"\n                    @click=\"deleteElement(key)\"\n                    >\n                </button>\n            </div>\n        </div>\n        <div class=\"meta-setting-area\">\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">タイトル</div>\n                <textarea\n                :class=\"tag.getTagLabel('pagetitle')\"\n                @input=\"genericInput($event, 'pagetitle')\"\n                :value=\"jsondata['pagetitle']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">ディスクリプション</div>\n                <textarea\n                :class=\"tag.getTagLabel('description')\"\n                @input=\"genericInput($event, 'description')\"\n                :value=\"jsondata['description']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">categoryID</div>\n\n                <select\n                v-model=\"selectedCategoryID\"\n                @change=\"genericInput($event, 'categoryID')\"\n                class=\"category-select-button\"\n                >\n                    <option\n                        v-for=\"(value, key) in catListArr\"\n                        :key=\"key\"\n                        :value=\"key\"\n                        :selected=\"key == jsondata['categoryID']\"\n                    >\n                        {{ value.category }}\n                    </option>\n                </select>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">thumbnail</div>\n                <textarea\n                :class=\"tag.getTagLabel('thumbnail')\"\n                @input=\"genericInput($event, 'thumbnail')\"\n                :value=\"jsondata['thumbnail']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">ogImg</div>\n                <textarea\n                :class=\"tag.getTagLabel('ogImg')\"\n                @input=\"genericInput($event, 'ogImg')\"\n                :value=\"jsondata['ogImg']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">投稿日</div>\n                <textarea\n                :class=\"tag.getTagLabel('created_at')\"\n                @input=\"genericInput($event, 'created_at')\"\n                :value=\"jsondata['created_at']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">更新日</div>\n                <textarea\n                :class=\"tag.getTagLabel('updated_at')\"\n                @input=\"genericInput($event, 'updated_at')\"\n                :value=\"jsondata['updated_at']\"\n                ></textarea>\n            </div>\n        </div>\n        <div class=\"submitButtonWrapper\">\n            <div class=\"submitButtonInner\">\n                <button\n                class=\"submitButton button_blue\"\n                @click=\"updateJsonData\"\n                >更新する</button>\n            </div>\n        </div>\n        <div class=\"mb2rem\">\n            <h2>翻訳する</h2>\n            <h3>翻訳に失敗した言語、まだ翻訳が済んでない言語一覧</h3>\n            <div>\n                <div\n                v-for=\"(value, key) in lnarr\"\n                :key=\"key\"\n                class=\"d-inline-block float-left w-auto\"\n                >\n                    <span\n                    v-if=\"translateLnArr.includes(value)\"\n                    >{{key}},</span>\n                </div>\n            </div>\n            <h3>言語を選ぶ</h3>\n            <div\n            v-for=\"(value, key) in lnarr\"\n            :key=\"key\"\n            class=\"translate-language-area d-inline-block float-left w-auto\"\n            >\n                <input\n                v-if=\"!translateLnArr.includes(value)\"\n                type=\"checkbox\" :id=\"value\" :value=\"value\"\n                v-model=\"translateLnArr\">\n                <input\n                v-else\n                type=\"checkbox\" :id=\"value\" :value=\"value\"\n                v-model=\"translateLnArr\"\n                checked\n                >\n                <label :for=\"value\">{{key}}</label>\n            </div>\n            <div class=\"submitButtonInner pt1rem pb1rem\">\n                <button\n                class=\"translationButton button_blue\"\n                @click=\"checkall\"\n                >全てにチェックを入れる</button>\n                <button\n                class=\"translationButton button_blue\"\n                @click=\"unCheckall\"\n                >全てのチェックを外す</button>\n                <button\n                class=\"translationButton button_blue\"\n                @click=\"checkTranslateSuccess\"\n                >翻訳できてない箇所のみ</button>\n            </div>\n            <div class=\"submitButtonInner\">\n                <button\n                class=\"translationButton button_pink\"\n                @click=\"translateJsonData('ChatGpt')\"\n                >ChatGPT</button>\n                <button\n                class=\"translationButton button_navy\"\n                @click=\"translateJsonData('GoogleAPI')\"\n                >Google Translate</button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from \"vue-class-component\";\nimport { mapState } from 'vuex';\n\nimport {store} from '../store/common/index';\nimport { PATH, TAG, lnarr, fullLinArr } from '../module/prop';\nimport { API } from '../module/function';\nimport { Menu } from '../module/editMenu/index';\nimport { GenericObject } from '../module/type';\n\nimport ImageUploader from '../components/editMenu/ImageUploader.vue';\ninterface ImageUploaderComponent extends Vue {\n  jsonkey: string;\n  file: File | null;\n}\n\n@Options({\n    computed: {\n        ...mapState(['modalStatus', 'jsondata', 'HoverTargetIndex', 'EditingTargetIndex', 'isLoading']),\n        EditingTargetIndex() {\n            return store.state.EditingTargetIndex;\n        },\n        HoverTargetIndex() {\n            return store.state.HoverTargetIndex;\n        },\n        isLoading() {\n            return store.state.isLoading;\n        }\n    },\n    components: {\n        ImageUploader\n    }\n})\nexport default class editMenu extends Vue {\n    path: PATH = new PATH();\n    tag: TAG = new TAG();\n    menu: Menu = new Menu();\n\n    textareaStyle!: string;\n    inputValues: {\n        [key: string]: GenericObject;\n    } = {};\n    fields = this.menu.fields;\n\n    displayTrash = 'hide-trash';\n    addcontenticon = this.path.addcontenticon;\n    trashicon = this.path.trashicon;\n    touchtag: GenericObject = {};\n    catListArr: GenericObject = {};\n    lnarr: GenericObject = lnarr;\n    fullLinArr: GenericObject = fullLinArr;\n    translateLnArr: string[] = [];\n    selectedCategoryID = null;\n    isDragging = false;\n    uploadpath = '';\n\n    created () {\n        //初期のデータを定義\n        this.readData();\n        //編集中のタグ情報の状態を初期化\n        this.resetObj(store.state.jsondata, 'updateStoreObj', 'EditingTargetIndex');\n        this.checkTranslateSuccess();\n        this.inputValues = store.state.jsondata;\n        this.selectedCategoryID = store.state.jsondata[\"categoryID\"];\n        this.uploadpath = `${process.env.VUE_APP_articleDirPath}/${this.$route.params.id}/img/`\n    }\n    readData() {\n        API.post (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_fileReadEndpoint}`,\n            {filePath: `${process.env.VUE_APP_articleDirPath}${this.$route.path}/index.json`},\n            (response: GenericObject) => {\n                store.commit('setJsonData', response.data);\n                this.selectedCategoryID = store.state.jsondata[\"categoryID\"];\n            }\n        );\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_categoryDetailDirectory}`,\n            { filePath: `${process.env.VUE_APP_listupPath}/category/ja/index.json`},\n            (response: GenericObject) => {\n                this.catListArr = JSON.parse(response.data.data);\n            }\n        );\n    }\n    async updateJsonData () {\n        this.ModifyJsonFile (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_fileEndpoint}`,\n            `${process.env.VUE_APP_articleDirPath}${this.$route.path}/index.json`\n        );\n        this.ModifyJsonFile (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_UpdateDirContentEndpoint}`,\n            \"dummy\"\n        );\n\n        // 画像アップロード関連\n        const uploadPromises: Promise<any>[] = [];\n        const imageUploaders = this.$refs.imageUploaders as unknown as ImageUploaderComponent[];\n        \n        for (const key in store.state.jsondata) {\n            if (this.isImageKey(key)) {\n                const uploader = imageUploaders.find((uploader) => uploader.jsonkey === key);\n                if (uploader && uploader.file) {\n                    const formData = new FormData();\n                    formData.append('file', uploader.file);\n                    formData.append('jsonkey', key);\n                    formData.append('filePath', store.state.jsondata[key]);\n                    uploadPromises.push(\n                        fetch(`${store.state.pageinfo.base_url}${process.env.VUE_APP_uploadimg}`, {\n                            method: 'POST',\n                            body: formData,\n                        }).then(response => response.json())\n                    );\n                }\n            }\n        }\n\n        const results = await Promise.all(uploadPromises);\n        results.forEach(result => {\n            if (result.success) {\n                store.commit('updateStoreObj', {\n                    target: 'jsondata',\n                    key: result.jsonkey,\n                    value: result.filepath,\n                });\n            }\n        });\n\n    }\n    translateJsonData (whichlng: string) {\n        //ChatGpt,GoogleAPI\n        const checkedElements = this.$el.querySelectorAll('.translate-language-area input[type=\"checkbox\"]:checked');\n        this.translateLnArr = Array.from(checkedElements).map(el => (el as HTMLInputElement).value);\n        API.post (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_fileTranslateEndpoint}`,\n            {\n                fileData: store.state.jsondata,\n                filePath: `${process.env.VUE_APP_articleDirPath}${this.$route.path}/index.json`,\n                translateLanguageArr: this.translateLnArr,\n                whichlng: whichlng\n            },\n            (response: GenericObject) => {\n                console.log(response.data);\n            }\n        );\n    }\n    checkTranslateSuccess () {\n        this.translateLnArr = [];\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_checkFailTranslate}`,\n            { directory: `${process.env.VUE_APP_articleDirPath}/${this.$route.params.id}`},\n            (response: GenericObject) => {\n                for (let key in this.lnarr) {\n                    if (!response.data.data.includes(this.lnarr[key])) {\n                        this.translateLnArr.push(this.lnarr[key]);\n                    }\n                }\n            }\n        );\n    }\n    checkall () {\n        this.translateLnArr = [];\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_checkFailTranslate}`,\n            { directory: `${process.env.VUE_APP_articleDirPath}/${this.$route.params.id}`},\n            (response: GenericObject) => {\n                for (let key in this.lnarr) {\n                    this.translateLnArr.push(this.lnarr[key]);\n                }\n            }\n        );\n    }\n    unCheckall () {\n        this.translateLnArr = [];\n    }\n\n    onDragOver() {\n        this.isDragging = true;\n    }\n    onDragLeave() {\n        this.isDragging = false;\n    }\n    updateDraggingState(isDragging: boolean) {\n        this.isDragging = isDragging;\n    }\n    updateImageUrl(key: string, url: string) {\n        store.commit('updateStoreObj', { target: 'inputValues', key: key, value: url });\n        store.commit('updateStoreObj', { target: 'jsondata', key: key, value: url });\n    }\n    private clickTagButton (e: Event, key: string) {//今クリックしたタグの情報を更新する。状態管理はupdateTargetTagInfoが実行されtargetTagInfoが更新される。\n        const target = e.target as HTMLElement\n        //編集中のタグ情報の状態を更新\n        this.resetObj(store.state.jsondata, 'updateStoreObj', 'EditingTargetIndex');\n        store.commit('updateStoreObj', { target: 'EditingTargetIndex', key: Number(target.getAttribute('index')), value: true });\n        store.dispatch('TargetIndexProperty');\n        this.inputValues = store.state.jsondata;\n        this.touchtag = this.isImgTag(this.tag.getElementTagLabel(key));\n        //テキストエリアの高さを合わせる\n        this.setTagHeight(target);\n    }\n    private handleInput (e: Event, key: string) {\n        const target = e.target as HTMLTextAreaElement;\n        this.setInputHeight(target);\n        store.state.jsondata[key] = target.value;\n        store.commit('setJsonData', store.state.jsondata);\n    }\n    private genericInput(e: Event, key: string) {\n        const target = e.target as HTMLTextAreaElement;\n        store.commit('changeJsonData', { key, value: target.value });\n    }\n    private addBlockFunc (e: MouseEvent) {\n        const target = e.target as HTMLElement\n        store.commit('updateStoreObj', { target: 'modalStatus', key: 'modalClassName', value: 'modal-show' });\n        store.commit('updateStoreObj', { target: 'modalStatus', key: 'modalWrapperClassName', value: 'modal-wrapper-show' });\n        store.commit('updateStoreObj', { target: 'modalStatus', key: 'bottom', value: `calc(100vh - 5rem - ${e.clientY}px)` });\n        store.commit('updateVariableState', { key: 'nexttagNum', value: target.dataset.plusnum });\n    }\n    private mouseOverButton (e: Event) {\n        const target = e.target as HTMLTextAreaElement;\n        this.resetObj(store.state.HoverTargetIndex, 'updateStoreObj', 'HoverTargetIndex');\n        store.commit('updateStoreObj', { target: 'HoverTargetIndex', key: Number(target.getAttribute('index')), value: true });\n        store.dispatch('TargetIndexProperty');\n    }\n    private mouseOutButton () {\n        this.resetObj(store.state.HoverTargetIndex, 'updateStoreObj', 'HoverTargetIndex');\n        store.dispatch('TargetIndexProperty');\n    }\n    private resetObj (jsondata:GenericObject, commit: string, target: string) {\n        Object.keys(jsondata).forEach((obj: string, i: number) => {\n            store.commit(commit, { target: target, key: i, value: false });\n        });\n    }\n    private TargetIndexProperty() {\n      return store.state.EditingTargetIndex\n    }\n    private HoverIndexProperty() {\n      return store.state.HoverTargetIndex\n    }\n    private deleteElement(key: string) {\n        delete store.state.jsondata[key];\n        store.commit('setJsonData', store.state.jsondata);\n    }\n    private isLoading() {\n      return store.state.isLoading\n    }\n    private ModifyJsonFile (endpoint: string, filepath: string) {\n        store.dispatch('isLoading');\n        API.post (\n            endpoint,\n            {\n                fileData: store.state.jsondata,\n                filePath: filepath\n            },\n            (response: GenericObject) => {\n                console.log(response.data);\n            }\n        );\n    }\n\n    /***** html *****/\n    private setTagHeight (target: HTMLElement) {\n        this.textareaStyle = '';\n        if (!this.touchtag[\"isimg\"]) {\n            this.textareaStyle = `height: ${target.offsetHeight}px; margin-bottom: 0;`;\n        }\n    }\n    private setInputHeight (target: HTMLElement) {\n        target.style.height = 'auto';\n        if (!this.touchtag[\"isimg\"]) {\n            target.style.height = `${target.scrollHeight}px`;\n        }\n    }\n    private addButtonStyle (index: number) {\n        if (store.state.HoverTargetIndex[index]) {\n            return 'opacity:1; transition: all .5s;';\n        }\n        return 'opacity:0; transition: all .5s;';\n    }\n    private getPaddingClass(key: string, index: number) {\n        let classname = \"\";\n        const entries = Object.entries(store.state.jsondata);\n        if (0 < index) {\n            if (this.tag.getElementTagLabel(key) === 'for-p') {\n                classname = `p-${this.tag.getElementTagLabel( entries[index - 1][0])}`\n            } else {\n                classname = `div-${this.tag.getElementTagLabel(key)}`;\n            }\n        }\n        return classname;\n    }\n    private isImgTag (tagname: string) {\n        let wclass = this.tag.tagjson[tagname] ? this.tag.tagjson[tagname] : '';\n        let isimg = this.tag.tagjson[tagname] ? true : false;\n        return {\"isimg\": isimg, \"wclass\": wclass}\n    }\n    private isImageKey(key: string): boolean {\n        let prop = this.isImgTag(this.tag.getElementTagLabel(key));\n        return prop[\"isimg\"];\n    }\n    private getFullImageUrl(value: string): string {\n        return `${process.env.VUE_APP_website_path}${value}`;\n    }\n    private displayArticleHTML (key: string, value: string) {\n        let prop = this.isImgTag(this.tag.getElementTagLabel(key));\n        return !prop[\"isimg\"] ? value : `<img src='${this.getFullImageUrl(value)}' class='${prop[\"wclass\"]}'>`;\n    }\n}\n</script>\n<style lang=\"scss\" scoped>\n.content-wrapper {\n    .editelem {\n        width: 100%;\n        float: left;\n        margin: 1rem .5rem;\n        position: relative;\n        div {\n            width: 98%;\n            textarea {\n                border: none;\n                background: rgb(0, 0, 0, 0.05);\n            }\n        }\n        div:not(.addcontent-wrapper) {\n            margin: 0 auto;\n            float: left;\n            width: 100%;\n            position: relative;\n        }\n    }\n    .editelem > * {\n        cursor: pointer;\n    }\n}\n.meta-label-wrapper {\n    textarea {\n        font-size: 1rem;\n        padding: .5rem 0 0 .5rem;\n        width: 100%;\n    }\n}\n.meta-setting-area {\n    margin: 1rem auto;\n    padding: 0 .5rem;\n    .meta-label-wrapper {\n        margin-bottom: 1rem;\n    }\n}\n.meta-setting-area .meta-label-wrapper,\n.meta-setting-area {\n    display: inline-block;\n    width: 100%;\n}\n\nh2,\n.for-h2 {\n    font-size: 1.5rem;\n    margin: 0 0 .5rem 0;\n}\n\nh3,\n.for-h3,\n.for-box-h3 {\n    font-size: 1.17rem;\n    margin: 0 0 .5rem 0;\n}\n\nh4,\n.for-h4 {\n    font-size: 1.05rem;\n    margin: 0 0 .5rem 0;\n}\n\np,\n.for-p,\n.for-box-description {\n    font-size: 1rem;\n    margin: 0 0 .5rem 0;\n}\n\n.p-for-h2 {\n    padding-left: 1rem;\n}\n.div-for-h3 {\n    padding-left: 1rem;\n}\n.p-for-h3 {\n    padding-left: 2rem;\n}\n.div-for-h4 {\n    padding-left: 2rem;\n}\n.p-for-h4 {\n    padding-left: 3rem;\n}\n.div-for-h5 {\n    padding-left: 3rem;\n}\n.p-for-h5 {\n    padding-left: 4rem;\n}\n.div-for-h6 {\n    padding-left: 4rem;\n}\n.p-for-h6 {\n    padding-left: 5rem;\n}\n.display-addbutton,\n.display-trash {\n    opacity: 1;\n}\n.hide-addbutton,\n.hide-trash {\n    opacity: 0;\n}\n.display-addbutton,\n.hide-addbutton,\n.display-trash,\n.hide-trash {\n    transition: all .3s;\n}\n.addcontentbutton,\n.addcontentbutton img {\n    cursor: pointer;\n}\n.category-select-button {\n    border: solid .5px;\n    margin-top: .5rem;\n    height: 2rem;\n    cursor: pointer;\n    background: #ffff;\n    font-size: 1rem;\n    width: 10rem;\n    text-align-last: center;\n    border-radius: 0px;\n    border-top-left-radius: 0;\n    box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.3);\n    appearance: none;\n}\n</style>","/templates/admin_vue/src/views/articleLists.vue",[],"/templates/admin_vue/src/components/Modal.vue",[],"/templates/admin_vue/src/components/icon/loadingIcon.vue",[],"/templates/admin_vue/src/module/prop.ts",[],"/templates/admin_vue/src/module/function.ts",[],"/templates/admin_vue/src/module/editMenu/index.ts",[],"/templates/admin_vue/src/views/categoryList.vue",["75","76"],"<template>\n    <div class=\"content-wrapper\">\n        <div class=\"mb2rem\">\n            <h2>カテゴリ一覧</h2>\n            <table class=\"list-chart w-100\">\n                <tbody>\n                    <tr v-for=\"(cat, index) in catinfo\" :key=\"cat.category\">\n                        <td class=\"p05rem\">\n                            <router-link :to=\"`${currentPath}/${index}`\" class=\"menu-list-button menuicon\">\n                            {{cat.category}}\n                            </router-link>\n                        </td>\n                        <td class=\"p05rem\"><button type=\"button\" @click=\"deleteData(index)\">\n                            <img\n                            :src=\"trashicon\"\n                            class=\"w2rem h2rem cursor\"\n                            >\n                        </button></td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n        <div>\n            <h2>カテゴリー追加</h2>\n            <table class=\"list-chart w-100\">\n                <tbody>\n                    <tr>\n                        <td class=\"font-weight-bold p05rem\">カテゴリ名</td>\n                        <td class=\"p05rem\"><input type=\"text\" class=\"w-100 lh2rem font1rem\" v-model=\"categoryName\" @input=\"editCatInfo('categoryName', $event.target.value)\"></td>\n                    </tr>\n                    <tr>\n                        <td class=\"font-weight-bold p05rem\">ディスクリプション</td>\n                        <td class=\"p05rem\"><input type=\"text\" class=\"w-100 lh2rem font1rem\" v-model=\"categoryDescription\" @input=\"editCatInfo('categoryDescription', $event.target.value)\"></td>\n                    </tr>\n                    <tr>\n                        <td class=\"font-weight-bold p05rem\">og画像</td>\n                        <td class=\"p05rem\"><input type=\"text\" class=\"w-100 lh2rem font1rem\" v-model=\"categoryOgImgPath\" @input=\"editCatInfo('categoryOgImgPath', $event.target.value)\"></td>\n                    </tr>\n                </tbody>\n            </table>\n            <div class=\"submitButtonWrapper\">\n                <div class=\"submitButtonInner\">\n                    <button\n                    class=\"submitButton button_blue\"\n                    >カテゴリを追加する</button>\n                </div>\n            </div>\n            <div class=\"mb2rem\">\n                <h2>翻訳する</h2>\n                <h3>翻訳に失敗した言語、まだ翻訳が済んでない言語一覧</h3>\n                <div>\n                    <div\n                    v-for=\"(value, key) in lnarr\"\n                    :key=\"key\"\n                    class=\"d-inline-block float-left w-auto\"\n                    >\n                        <span\n                        v-if=\"translateLnArr.includes(value)\"\n                        >{{key}},</span>\n                    </div>\n                </div>\n                <h3>言語を選ぶ</h3>\n                <div\n                v-for=\"(value, key) in lnarr\"\n                :key=\"key\"\n                class=\"translate-language-area d-inline-block float-left w-auto\"\n                >\n                    <input\n                    v-if=\"!translateLnArr.includes(value)\"\n                    type=\"checkbox\" :id=\"value\" :value=\"value\"\n                    v-model=\"translateLnArr\">\n                    <input\n                    v-else\n                    type=\"checkbox\" :id=\"value\" :value=\"value\"\n                    v-model=\"translateLnArr\"\n                    checked\n                    >\n                    <label :for=\"value\">{{key}}</label>\n                </div>\n                <div class=\"submitButtonInner pt1rem pb1rem\">\n                    <button\n                    class=\"translationButton button_blue\"\n                    @click=\"checkall\"\n                    >全てにチェックを入れる</button>\n                    <button\n                    class=\"translationButton button_blue\"\n                    @click=\"unCheckall\"\n                    >全てのチェックを外す</button>\n                    <button\n                    class=\"translationButton button_blue\"\n                    @click=\"checkTranslateSuccess\"\n                    >翻訳できてない箇所のみ</button>\n                </div>\n                <div class=\"submitButtonInner\">\n                    <button\n                    class=\"translationButton button_pink\"\n                    @click=\"translateJsonData('ChatGpt')\"\n                    >ChatGPT</button>\n                    <button\n                    class=\"translationButton button_navy\"\n                    @click=\"translateJsonData('GoogleAPI')\"\n                    >Google Translate</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue } from \"vue-class-component\";\nimport {store} from '../store/common/index';\nimport { PATH, lnarr, fullLinArr } from '../module/prop';\nimport { GenericObject } from '../module/type';\nimport { API } from '../module/function';\n\nexport default class categoryList extends Vue {\n    path: PATH = new PATH();\n    trashicon = this.path.trashicon;\n    categoryName = '';\n    categoryDescription = '';\n    categoryOgImgPath = '';\n    catdir = '';\n    catinfo: GenericObject = {}\n    lnarr: GenericObject = lnarr;\n    fullLinArr: GenericObject = fullLinArr;\n    translateLnArr: string[] = [];\n    currentPath = '';\n\n    created () {\n        this.setCatData();\n        this.readData();\n        this.checkTranslateSuccess();\n        this.currentPath = this.$route.path;\n    }\n    setCatData() {\n        this.catdir = `${process.env.VUE_APP_listupPath}${this.$route.path}/index.json`;\n    }\n    readData() {\n        API.post (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_categoryDirectory}`,\n            {filePath: this.catdir},\n            (response: GenericObject) => {\n                this.catinfo = response.data;\n            }\n        );\n    }\n    addCategory () {\n        if (!this.categoryName || !this.categoryDescription || !this.categoryOgImgPath) {\n            return;\n        }\n\n        let newKey: number;\n        if (Object.keys(this.catinfo).length === 0) {\n            newKey = 1;\n        } else {\n            const keys = Object.keys(this.catinfo).map(key => parseInt(key, 10));\n            newKey = Math.max(...keys) + 1;\n        }\n\n        let today = this.getCurrentDateFormatted();\n        this.catinfo[newKey] = {\n            \"category\": this.categoryName,\n            \"catlist\": [],\n            \"created_at\": today,\n            \"created_at_for_sitemap\": today,\n            \"description\": this.categoryDescription,\n            \"ogImg\": this.categoryOgImgPath,\n            \"updated_at\": today,\n            \"updated_at_for_sitemap\": today\n        };\n\n        API.post (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_categoryAddDirectory}`,\n            {filePath: this.catdir, newData: this.catinfo},\n            (response: GenericObject) => {\n                console.log(response);\n            }\n        );\n    }\n\n    editCatInfo(property: string, value: string) {\n      (this as any)[property] = value;\n    }\n\n    deleteData (val: string) {\n        API.post (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_categoryDeleteDirectory}`,\n            {filePath: this.catdir, deleteNum: val},\n            (response: GenericObject) => {\n                this.catinfo = response.data;\n            }\n        );\n    }\n\n    translateJsonData (whichlng: string) {\n        //ChatGpt,GoogleAPI\n        const checkedElements = this.$el.querySelectorAll('.translate-language-area input[type=\"checkbox\"]:checked');\n        this.translateLnArr = Array.from(checkedElements).map(el => (el as HTMLInputElement).value);\n        API.post (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_fileTranslateEndpoint}`,\n            {\n                filePath: `${process.env.VUE_APP_listupPath}${this.$route.path}/index.json`,\n                translateLanguageArr: this.translateLnArr,\n                whichlng: whichlng\n            },\n            (response: GenericObject) => {\n                console.log(response.data);\n            }\n        );\n    }\n    checkTranslateSuccess () {\n        this.translateLnArr = [];\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_checkFailTranslate}`,\n            { directory: process.env.VUE_APP_categoryDirPath},\n            (response: GenericObject) => {\n                for (let key in this.lnarr) {\n                    if (!response.data.data.includes(this.lnarr[key])) {\n                        this.translateLnArr.push(this.lnarr[key]);\n                    }\n                }\n            }\n        );\n    }\n    checkall () {\n        this.translateLnArr = [];\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_checkFailTranslate}`,\n            { directory: process.env.VUE_APP_categoryDirPath},\n            (response: GenericObject) => {\n                for (let key in this.lnarr) {\n                    this.translateLnArr.push(this.lnarr[key]);\n                }\n            }\n        );\n    }\n    unCheckall () {\n        this.translateLnArr = [];\n    }\n    private getCurrentDateFormatted (): string {\n        const today = new Date();\n        \n        const year = today.getFullYear();\n        const month = String(today.getMonth() + 1).padStart(2, '0');\n        const day = String(today.getDate()).padStart(2, '0');\n        \n        return `${year}-${month}-${day}`;\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n</style>","/templates/admin_vue/src/views/categoryDetail.vue",["77"],"/templates/admin_vue/src/views/commonInfo.vue",["78"],"<template>\n    <div class=\"content-wrapper\">\n        <h2>共通項目詳細</h2>\n        <table class=\"list-chart w-100\">\n            <thead>\n                <tr>\n                    <th class=\"p05rem\">項目</th>\n                    <th class=\"p05rem\">値</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr v-for=\"(value, key) in catinfo\" :key=\"key\">\n                    <td class=\"p05rem\">{{ key }}</td>\n                    <td class=\"p05rem\"\n                    v-if=\"typeof value == 'string'\">\n                        <input v-model=\"catinfo[key]\" @input=\"updateCat(key, $event.target.value)\" class=\"w-100 lh2rem font1rem\"/>\n                    </td>\n                    <td class=\"p05rem\"\n                    v-else>\n                        <table>\n                            <tr\n                            v-for=\"(value2, key2) in value\" :key=\"key2\"\n                            >\n                                <td>{{ key2 }}</td>\n                                <td>\n                                    <input\n                                    v-model=\"catinfo[key][key2]\" @input=\"updateCatsCat(key2, $event.target.value)\"\n                                    class=\"w-100 lh2rem font1rem\"/>\n                                </td>\n                            </tr>\n                        </table>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n        <div class=\"flex-container mt2rem font1rem\">\n            <button @click=\"goBack\" class=\"menu-list-button menuicon submitButton button_blue font1rem\">戻る</button>\n            <button type=\"button\" @click=\"rebaseCategory\" class=\"submitButton button_blue font1rem\">更新する</button>\n        </div>\n    \n        <div class=\"mb2rem\">\n            <h2>翻訳する</h2>\n            <h3>翻訳に失敗した言語、まだ翻訳が済んでない言語一覧</h3>\n            <div>\n                <div\n                v-for=\"(value, key) in lnarr\"\n                :key=\"key\"\n                class=\"d-inline-block float-left w-auto\"\n                >\n                    <span\n                    v-if=\"translateLnArr.includes(value)\"\n                    >{{key}},</span>\n                </div>\n            </div>\n            <h3>言語を選ぶ</h3>\n            <div\n            v-for=\"(value, key) in lnarr\"\n            :key=\"key\"\n            class=\"translate-language-area d-inline-block float-left w-auto\"\n            >\n                <input\n                v-if=\"!translateLnArr.includes(value)\"\n                type=\"checkbox\" :id=\"value\" :value=\"value\"\n                v-model=\"translateLnArr\">\n                <input\n                v-else\n                type=\"checkbox\" :id=\"value\" :value=\"value\"\n                v-model=\"translateLnArr\"\n                checked\n                >\n                <label :for=\"value\">{{key}}</label>\n            </div>\n            <div class=\"submitButtonInner pt1rem pb1rem\">\n                <button\n                class=\"translationButton button_blue\"\n                @click=\"checkall\"\n                >全てにチェックを入れる</button>\n                <button\n                class=\"translationButton button_blue\"\n                @click=\"unCheckall\"\n                >全てのチェックを外す</button>\n                <button\n                class=\"translationButton button_blue\"\n                @click=\"checkTranslateSuccess\"\n                >翻訳できてない箇所のみ</button>\n            </div>\n            <div class=\"submitButtonInner\">\n                <button\n                class=\"translationButton button_pink\"\n                @click=\"translateJsonData('ChatGpt')\"\n                >ChatGPT</button>\n                <button\n                class=\"translationButton button_navy\"\n                @click=\"translateJsonData('GoogleAPI')\"\n                >Google Translate</button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue } from \"vue-class-component\";\nimport { store } from '../store/common/index';\nimport { GenericObject } from '../module/type';\nimport { API } from '../module/function';\nimport { lnarr, fullLinArr } from '../module/prop';\n\nexport default class commonInfo extends Vue {\n    categoryName = '';\n    categoryDescription = '';\n    categoryOgImgPath = '';\n    catinfo: GenericObject = {};\n    lnarr: GenericObject = lnarr;\n    fullLinArr: GenericObject = fullLinArr;\n    translateLnArr: string[] = [];\n    catdir = '';\n\n    created() {\n        this.setCatData();\n        this.readData();\n        this.checkTranslateSuccess();\n    }\n\n    setCatData() {\n        this.catdir = `${process.env.VUE_APP_listupPath}${this.$route.path}/index.json`;\n    }\n\n    readData() {\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_categoryDetailDirectory}`,\n            { filePath: this.catdir},\n            (response: GenericObject) => {\n                let rawdata = JSON.parse(response.data.data);\n                this.catinfo = rawdata;\n            }\n        );\n    }\n\n    updateCat(key: string, newValue: string) {\n        this.catinfo[key] = newValue;\n    }\n    updateCatsCat(key: string, key2: string, newValue: string) {\n        this.catinfo[key][key2] = newValue;\n    }\n\n    rebaseCategory() {\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_categoryDetailRebaseDirectory}`,\n            { filePath: this.catdir, rebaseData: this.catinfo },\n            (response: GenericObject) => {\n                console.log(response);\n            }\n        );\n    }\n    translateJsonData (whichlng: string) {\n        //ChatGpt,GoogleAPI\n        const checkedElements = this.$el.querySelectorAll('.translate-language-area input[type=\"checkbox\"]:checked');\n        this.translateLnArr = Array.from(checkedElements).map(el => (el as HTMLInputElement).value);\n        API.post (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_fileTranslateEndpoint}`,\n            {\n                fileData: store.state.jsondata,\n                filePath: `${process.env.VUE_APP_commonDirPath}/${this.$route.params.country}/index.json`,\n                translateLanguageArr: this.translateLnArr,\n                whichlng: whichlng\n            },\n            (response: GenericObject) => {\n                console.log(response.data);\n            }\n        );\n    }\n    checkTranslateSuccess () {\n        this.translateLnArr = [];\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_checkFailTranslate}`,\n            { directory: process.env.VUE_APP_commonDirPath},\n            (response: GenericObject) => {\n                for (let key in this.lnarr) {\n                    if (!response.data.data.includes(this.lnarr[key])) {\n                        this.translateLnArr.push(this.lnarr[key]);\n                    }\n                }\n            }\n        );\n    }\n    checkall () {\n        this.translateLnArr = [];\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_checkFailTranslate}`,\n            { directory: process.env.VUE_APP_commonDirPath},\n            (response: GenericObject) => {\n                for (let key in this.lnarr) {\n                    this.translateLnArr.push(this.lnarr[key]);\n                }\n            }\n        );\n    }\n    unCheckall () {\n        this.translateLnArr = [];\n    }\n\n    goBack() {\n        this.$router.go(-1);\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n</style>\n","/templates/admin_vue/src/components/editMenu/ImageUploader.vue",["79"],"<template>\n  <div>\n    <div\n      class=\"drop-area\"\n      @dragover.prevent=\"onDragOver\"\n      @dragleave.prevent=\"onDragLeave\"\n      @drop.prevent=\"handleDrop($event, jsonkey)\"\n      :class=\"{ 'dragging': internalIsDragging}\"\n    >\n      <input type=\"file\" @change=\"handleFileChange\" ref=\"fileInput\" style=\"display:none;\" />\n      <div v-if=\"!file\"><!-- ファイルがない時 -->\n        <img\n          v-if=\"isval && !loadError\"\n          :src=\"imgsrc\"\n          @dragover.prevent=\"onDragOver\"\n          @dragleave.prevent=\"onDragLeave\"\n          @drop.prevent=\"handleDrop($event, jsonkey)\"\n          @error=\"onImageError\"\n          alt=\"Uploaded Image\" class=\"uploaded-image\"\n        />\n        <p v-if=\"!loadError && !isval\">画像をアップロード</p>\n        <p v-if=\"loadError && isval\">画像アップロードに失敗しました {{imgsrc}}</p>\n      </div>\n      <div v-else><!-- ファイルがある時 -->\n        <img v-if=\"file\" :src=\"fileUrl\" alt=\"Uploaded Image\" class=\"uploaded-image\" />\n        <div class=\"w-100 d-flex\">\n          <label>画像に名前をつける</label>\n          <input type=\"text\" @input=\"setImgName($event, jsonkey)\">\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, watch } from 'vue';\nimport { store } from '../../store/common/index';\n\nexport default defineComponent({\n  name: 'ImageUploader',\n  props: {\n    initialImageUrl: {\n      type: String,\n      default: ''\n    },\n    jsonkey: {\n      type: String,\n      default: ''\n    },\n    imgsrc: {\n      type: String,\n      default: ''\n    },\n    imgUpdir: {\n      type: String,\n      default: ''\n    },\n    isval: {\n      type: String,\n      default: ''\n    },\n    isDragging: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props, { emit }) {\n    const file = ref<File | null>(null);\n    const fileUrl = ref<string>(props.initialImageUrl);\n    const internalIsDragging = ref<boolean>(props.isDragging);\n    const loadError = ref<boolean>(false);\n\n    const handleDrop = (event: DragEvent, keyname: string) => {\n      const droppedFiles = event.dataTransfer?.files;\n      if (droppedFiles && droppedFiles.length > 0) {\n        handleFile(droppedFiles[0]);\n        internalIsDragging.value = false;\n        emit('updateDraggingState', false);\n      }\n    };\n\n    const setImgName = (event: Event, keyname: string) => {\n      const input = event.target as HTMLInputElement;\n      store.commit('updateStoreObj', { target: 'jsondata', key: keyname, value: `${props.imgUpdir}${input.value}.png` });\n    };\n\n    const handleFileChange = (event: Event) => {\n      const input = event.target as HTMLInputElement;\n      if (input.files && input.files.length > 0) {\n        handleFile(input.files[0]);\n      }\n    };\n\n    const handleFile = (fileObj: File) => {\n      if (fileObj && fileObj.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          fileUrl.value = e.target?.result as string;\n          emit('updateImageUrl', fileUrl.value);\n        };\n        reader.readAsDataURL(fileObj);\n        file.value = fileObj;\n      }\n    };\n\n    const onDragOver = () => {\n      internalIsDragging.value = true;\n      emit('updateDraggingState', true);\n    };\n\n    const onDragLeave = () => {\n      internalIsDragging.value = false;\n      emit('updateDraggingState', false);\n    };\n\n    const onImageError = () => {\n      loadError.value = true;\n      internalIsDragging.value = true;\n      emit('updateDraggingState', true);\n    };\n\n    watch(() => props.isDragging, (newVal) => {\n      internalIsDragging.value = newVal;\n    });\n\n    return {\n      file,\n      fileUrl,\n      internalIsDragging,\n      loadError,\n      handleDrop,\n      setImgName,\n      handleFileChange,\n      onDragOver,\n      onDragLeave,\n      onImageError\n    };\n  }\n});\n</script>\n\n<style scoped>\n.drop-area {\n    border: 2px dashed #ccc;\n    padding: 20px;\n    text-align: center;\n    transition: border-color 0.3s;\n}\n.drop-area.dragging {\n    border-color: #000;\n}\n.uploaded-image {\n    max-width: 100%;\n    margin-top: 20px;\n}\n</style>",{"ruleId":"80","severity":1,"message":"81","line":297,"column":39,"nodeType":"82","messageId":"83","endLine":297,"endColumn":42,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":365,"column":14,"nodeType":"87","messageId":"88","endLine":365,"endColumn":37},{"ruleId":"80","severity":1,"message":"81","line":314,"column":39,"nodeType":"82","messageId":"83","endLine":314,"endColumn":42,"suggestions":"89"},{"ruleId":"85","severity":1,"message":"86","line":383,"column":14,"nodeType":"87","messageId":"88","endLine":383,"endColumn":37},{"ruleId":"80","severity":1,"message":"81","line":182,"column":16,"nodeType":"82","messageId":"83","endLine":182,"endColumn":19,"suggestions":"90"},{"ruleId":"85","severity":1,"message":"86","line":230,"column":14,"nodeType":"87","messageId":"88","endLine":230,"endColumn":37},{"ruleId":"80","severity":1,"message":"81","line":39,"column":13,"nodeType":"82","messageId":"83","endLine":39,"endColumn":16,"suggestions":"91"},{"ruleId":"85","severity":1,"message":"86","line":191,"column":14,"nodeType":"87","messageId":"88","endLine":191,"endColumn":37},{"ruleId":"85","severity":1,"message":"92","line":73,"column":43,"nodeType":"87","messageId":"88","endLine":73,"endColumn":58},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["93","94"],"@typescript-eslint/no-unused-vars","'response' is defined but never used.","Identifier","unusedVar",["95","96"],["97","98"],["99","100"],"'keyname' is defined but never used.",{"messageId":"101","fix":"102","desc":"103"},{"messageId":"104","fix":"105","desc":"106"},{"messageId":"101","fix":"107","desc":"103"},{"messageId":"104","fix":"108","desc":"106"},{"messageId":"101","fix":"109","desc":"103"},{"messageId":"104","fix":"110","desc":"106"},{"messageId":"101","fix":"111","desc":"103"},{"messageId":"104","fix":"112","desc":"106"},"suggestUnknown",{"range":"113","text":"114"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"113","text":"115"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"116","text":"114"},{"range":"116","text":"115"},{"range":"117","text":"114"},{"range":"117","text":"115"},{"range":"118","text":"114"},{"range":"118","text":"115"},[11000,11003],"unknown","never",[11704,11707],[6924,6927],[1397,1400]]