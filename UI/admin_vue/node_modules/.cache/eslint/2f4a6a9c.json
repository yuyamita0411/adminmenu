[{"/templates/admin_vue/src/main.ts":"1","/templates/admin_vue/src/App.vue":"2","/templates/admin_vue/src/store/common/index.ts":"3","/templates/admin_vue/src/router/index.ts":"4","/templates/admin_vue/src/views/HomeView.vue":"5","/templates/admin_vue/src/views/editMenu.vue":"6","/templates/admin_vue/src/views/articleLists.vue":"7","/templates/admin_vue/src/components/Modal.vue":"8","/templates/admin_vue/src/components/icon/loadingIcon.vue":"9","/templates/admin_vue/src/module/prop.ts":"10","/templates/admin_vue/src/module/function.ts":"11","/templates/admin_vue/src/module/editMenu/index.ts":"12","/templates/admin_vue/src/views/categoryList.vue":"13","/templates/admin_vue/src/views/categoryDetail.vue":"14","/templates/admin_vue/src/views/commonInfo.vue":"15"},{"size":253,"mtime":1711075247063,"results":"16","hashOfConfig":"17"},{"size":3563,"mtime":1720259186816,"results":"18","hashOfConfig":"17"},{"size":1517,"mtime":1719629193827,"results":"19","hashOfConfig":"17"},{"size":1083,"mtime":1720259162460,"results":"20","hashOfConfig":"17"},{"size":18459,"mtime":1720262168560,"results":"21","hashOfConfig":"17"},{"size":19080,"mtime":1720253775183,"results":"22","hashOfConfig":"17"},{"size":6019,"mtime":1720262174323,"results":"23","hashOfConfig":"17"},{"size":4516,"mtime":1712792480426,"results":"24","hashOfConfig":"17"},{"size":4485,"mtime":1711587094674,"results":"25","hashOfConfig":"17"},{"size":8234,"mtime":1720198923059,"results":"26","hashOfConfig":"17"},{"size":1543,"mtime":1711641406608,"results":"27","hashOfConfig":"17"},{"size":405,"mtime":1711490426493,"results":"28","hashOfConfig":"17"},{"size":9602,"mtime":1720262261896,"results":"29","hashOfConfig":"17"},{"size":2643,"mtime":1720262171995,"results":"30","hashOfConfig":"17"},{"size":7503,"mtime":1720262289938,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ll0zfj",{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/templates/admin_vue/src/main.ts",[],"/templates/admin_vue/src/App.vue",[],"/templates/admin_vue/src/store/common/index.ts",[],"/templates/admin_vue/src/router/index.ts",[],"/templates/admin_vue/src/views/HomeView.vue",["63"],"/templates/admin_vue/src/views/editMenu.vue",["64"],"<template>\n    <div class=\"content-wrapper\">\n        <div\n        v-for=\"(value, key, index) in jsondata\"\n        :key=\"key\"\n        >\n        <AddTaskModal v-if=\"showChild\" @ReRender=\"toggle\"></AddTaskModal>\n            <div\n            v-if=\"tag.getElementTag(key)\"\n            class=\"editelem\">\n                <div\n                :class=\"getPaddingClass(key, index)\"\n                >\n                    <span\n                        :index=\"index\"\n                        :data-itemkey=\"key\"\n                        :class=\"tag.getElementTagLabel(key)\"\n                        v-if=\"!EditingTargetIndex[index]\"\n                        @click=\"clickTagButton($event, key)\"\n                        style=\"min-height:1.5rem;\"\n                        v-html=\"displayArticleHTML(key, value)\"\n                    >\n                    </span>\n                    <textarea\n                        v-else\n                        :class=\"tag.getElementTagLabel(key)\"\n                        :value=\"inputValues[key]\"\n                        :style=\"textareaStyle\"\n                        @input=\"handleInput($event, key)\"\n                    >\n                    </textarea>\n                </div>\n                <div\n                    @mouseover=\"mouseOverButton\"\n                    @mousemove=\"mouseOverButton\"\n                    @mouseout=\"mouseOutButton\"\n                    :index=\"index\"\n                    class=\"addcontent-wrapper position-absolute\"\n                >\n                    <button\n                    @click=\"addBlockFunc\"\n                    class=\"addcontentbutton position-absolute\"\n                    ><img\n                    :index=\"index\"\n                    @mouseover=\"mouseOverButton\"\n                    @mousemove=\"mouseOverButton\"\n                    @mouseout=\"mouseOutButton\"\n                    :style=\"addButtonStyle(index)\"\n                    :src=\"addcontenticon\"\n                    :data-plusnum=\"index+1\"></button>\n                    <span class=\"addcontent-border bottom-border\"></span>\n                </div>\n                <button\n                v-if=\"key != 'pagetitle'\"\n                class=\"trashbutton position-absolute\">\n                    <img\n                    :src=\"trashicon\"\n                    @click=\"deleteElement(key)\"\n                    >\n                </button>\n            </div>\n        </div>\n        <div class=\"meta-setting-area\">\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">タイトル</div>\n                <textarea\n                :class=\"tag.getTagLabel('pagetitle')\"\n                @input=\"genericInput($event, 'pagetitle')\"\n                :value=\"jsondata['pagetitle']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">ディスクリプション</div>\n                <textarea\n                :class=\"tag.getTagLabel('description')\"\n                @input=\"genericInput($event, 'description')\"\n                :value=\"jsondata['description']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">categoryID</div>\n\n                <select v-model=\"selectedCategoryID\" @change=\"genericInput($event, 'categoryID')\">\n                    <option\n                        v-for=\"(value, key) in catListArr\"\n                        :key=\"key\"\n                        :value=\"key\"\n                        :selected=\"key == jsondata['categoryID']\"\n                    >\n                        {{ value.category }}\n                    </option>\n                </select>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">thumbnail</div>\n                <textarea\n                :class=\"tag.getTagLabel('thumbnail')\"\n                @input=\"genericInput($event, 'thumbnail')\"\n                :value=\"jsondata['thumbnail']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">ogImg</div>\n                <textarea\n                :class=\"tag.getTagLabel('ogImg')\"\n                @input=\"genericInput($event, 'ogImg')\"\n                :value=\"jsondata['ogImg']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">投稿日</div>\n                <textarea\n                :class=\"tag.getTagLabel('created_at')\"\n                @input=\"genericInput($event, 'created_at')\"\n                :value=\"jsondata['created_at']\"\n                ></textarea>\n            </div>\n            <div class=\"meta-label-wrapper\">\n                <div class=\"font-weight-bold\">更新日</div>\n                <textarea\n                :class=\"tag.getTagLabel('updated_at')\"\n                @input=\"genericInput($event, 'updated_at')\"\n                :value=\"jsondata['updated_at']\"\n                ></textarea>\n            </div>\n        </div>\n        <div class=\"submitButtonWrapper\">\n            <div class=\"submitButtonInner\">\n                <button\n                class=\"submitButton button_blue\"\n                @click=\"updateJsonData\"\n                >更新する</button>\n            </div>\n        </div>\n        <div class=\"mb2rem\">\n            <h2>翻訳する</h2>\n            <h3>翻訳に失敗した言語、まだ翻訳が済んでない言語一覧</h3>\n            <div>\n                <div\n                v-for=\"(value, key) in lnarr\"\n                :key=\"key\"\n                class=\"d-inline-block float-left w-auto\"\n                >\n                    <span\n                    v-if=\"translateLnArr.includes(value)\"\n                    >{{key}},</span>\n                </div>\n            </div>\n            <h3>言語を選ぶ</h3>\n            <div\n            v-for=\"(value, key) in lnarr\"\n            :key=\"key\"\n            class=\"translate-language-area d-inline-block float-left w-auto\"\n            >\n                <input\n                v-if=\"!translateLnArr.includes(value)\"\n                type=\"checkbox\" :id=\"value\" :value=\"value\"\n                v-model=\"translateLnArr\">\n                <input\n                v-else\n                type=\"checkbox\" :id=\"value\" :value=\"value\"\n                v-model=\"translateLnArr\"\n                checked\n                >\n                <label :for=\"value\">{{key}}</label>\n            </div>\n            <div class=\"submitButtonInner pt1rem pb1rem\">\n                <button\n                class=\"translationButton button_blue\"\n                @click=\"checkall\"\n                >全てにチェックを入れる</button>\n                <button\n                class=\"translationButton button_blue\"\n                @click=\"unCheckall\"\n                >全てのチェックを外す</button>\n                <button\n                class=\"translationButton button_blue\"\n                @click=\"checkTranslateSuccess\"\n                >翻訳できてない箇所のみ</button>\n            </div>\n            <div class=\"submitButtonInner\">\n                <button\n                class=\"translationButton button_pink\"\n                @click=\"translateJsonData('ChatGpt')\"\n                >ChatGPT</button>\n                <button\n                class=\"translationButton button_navy\"\n                @click=\"translateJsonData('GoogleAPI')\"\n                >Google Translate</button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options } from \"vue-class-component\";\nimport { mapState } from 'vuex';\n\nimport {store} from '../store/common/index';\nimport { PATH, TAG, lnarr, fullLinArr } from '../module/prop';\nimport { API } from '../module/function';\nimport { Menu } from '../module/editMenu/index';\nimport { GenericObject } from '../module/type';\n\n@Options({\n    computed: {\n        ...mapState(['modalStatus', 'jsondata', 'HoverTargetIndex', 'EditingTargetIndex', 'isLoading']),\n        EditingTargetIndex() {\n            return store.state.EditingTargetIndex;\n        },\n        HoverTargetIndex() {\n            return store.state.HoverTargetIndex;\n        },\n        isLoading() {\n            return store.state.isLoading;\n        }\n    }\n})\nexport default class editMenu extends Vue {\n    path: PATH = new PATH();\n    tag: TAG = new TAG();\n    menu: Menu = new Menu();\n\n    textareaStyle!: string;\n    inputValues: {\n        [key: string]: GenericObject;\n    } = {};\n    fields = this.menu.fields;\n\n    displayTrash = 'hide-trash';\n    addcontenticon = this.path.addcontenticon;\n    trashicon = this.path.trashicon;\n    touchtag: GenericObject = {};\n    catListArr: GenericObject = {};\n    lnarr: GenericObject = lnarr;\n    fullLinArr: GenericObject = fullLinArr;\n    translateLnArr: string[] = [];\n    selectedCategoryID = null;\n\n    created () {\n        //初期のデータを定義\n        this.readData();\n        //編集中のタグ情報の状態を初期化\n        this.resetObj(store.state.jsondata, 'updateStoreObj', 'EditingTargetIndex');\n        this.checkTranslateSuccess();\n        this.inputValues = store.state.jsondata;\n        this.selectedCategoryID = store.state.jsondata[\"categoryID\"];\n    }\n    readData() {\n        API.post (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_fileReadEndpoint}`,\n            {filePath: `${process.env.VUE_APP_articleDirPath}${this.$route.path}/index.json`},\n            (response: GenericObject) => {\n                store.commit('setJsonData', response.data);\n                this.selectedCategoryID = store.state.jsondata[\"categoryID\"];\n            }\n        );\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_categoryDetailDirectory}`,\n            { filePath: `${process.env.VUE_APP_listupPath}/category/ja/index.json`},\n            (response: GenericObject) => {\n                this.catListArr = JSON.parse(response.data.data);\n            }\n        );\n    }\n    updateJsonData () {\n        this.ModifyJsonFile (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_fileEndpoint}`,\n            `${process.env.VUE_APP_articleDirPath}${this.$route.path}/index.json`\n        );\n        this.ModifyJsonFile (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_UpdateDirContentEndpoint}`,\n            \"dummy\"\n        );\n    }\n    translateJsonData (whichlng: string) {\n        //ChatGpt,GoogleAPI\n        const checkedElements = this.$el.querySelectorAll('.translate-language-area input[type=\"checkbox\"]:checked');\n        this.translateLnArr = Array.from(checkedElements).map(el => (el as HTMLInputElement).value);\n        API.post (\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_fileTranslateEndpoint}`,\n            {\n                fileData: store.state.jsondata,\n                filePath: `${process.env.VUE_APP_articleDirPath}${this.$route.path}/index.json`,\n                translateLanguageArr: this.translateLnArr,\n                whichlng: whichlng\n            },\n            (response: GenericObject) => {\n                console.log(response.data);\n            }\n        );\n    }\n    checkTranslateSuccess () {\n        this.translateLnArr = [];\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_checkFailTranslate}`,\n            { directory: `${process.env.VUE_APP_articleDirPath}/${this.$route.params.id}`},\n            (response: GenericObject) => {\n                for (let key in this.lnarr) {\n                    if (!response.data.data.includes(this.lnarr[key])) {\n                        this.translateLnArr.push(this.lnarr[key]);\n                    }\n                }\n            }\n        );\n    }\n    checkall () {\n        this.translateLnArr = [];\n        API.post(\n            `${store.state.pageinfo.base_url}${process.env.VUE_APP_checkFailTranslate}`,\n            { directory: `${process.env.VUE_APP_articleDirPath}/${this.$route.params.id}`},\n            (response: GenericObject) => {\n                for (let key in this.lnarr) {\n                    this.translateLnArr.push(this.lnarr[key]);\n                }\n            }\n        );\n    }\n    unCheckall () {\n        this.translateLnArr = [];\n    }\n    private clickTagButton (e: Event, key: string) {//今クリックしたタグの情報を更新する。状態管理はupdateTargetTagInfoが実行されtargetTagInfoが更新される。\n        const target = e.target as HTMLElement\n        //編集中のタグ情報の状態を更新\n        this.resetObj(store.state.jsondata, 'updateStoreObj', 'EditingTargetIndex');\n        store.commit('updateStoreObj', { target: 'EditingTargetIndex', key: Number(target.getAttribute('index')), value: true });\n        store.dispatch('TargetIndexProperty');\n        this.inputValues = store.state.jsondata;\n        this.touchtag = this.isImgTag(this.tag.getElementTagLabel(key));\n        //テキストエリアの高さを合わせる\n        this.setTagHeight(target);\n    }\n    private handleInput (e: Event, key: string) {\n        const target = e.target as HTMLTextAreaElement;\n        this.setInputHeight(target);\n        store.state.jsondata[key] = target.value;\n        store.commit('setJsonData', store.state.jsondata);\n    }\n    private genericInput(e: Event, key: string) {\n        const target = e.target as HTMLTextAreaElement;\n        store.commit('changeJsonData', { key, value: target.value });\n    }\n    private addBlockFunc (e: MouseEvent) {\n        const target = e.target as HTMLElement\n        store.commit('updateStoreObj', { target: 'modalStatus', key: 'modalClassName', value: 'modal-show' });\n        store.commit('updateStoreObj', { target: 'modalStatus', key: 'modalWrapperClassName', value: 'modal-wrapper-show' });\n        store.commit('updateStoreObj', { target: 'modalStatus', key: 'bottom', value: `calc(100vh - 5rem - ${e.clientY}px)` });\n        store.commit('updateVariableState', { key: 'nexttagNum', value: target.dataset.plusnum });\n    }\n    private mouseOverButton (e: Event) {\n        const target = e.target as HTMLTextAreaElement;\n        this.resetObj(store.state.HoverTargetIndex, 'updateStoreObj', 'HoverTargetIndex');\n        store.commit('updateStoreObj', { target: 'HoverTargetIndex', key: Number(target.getAttribute('index')), value: true });\n        store.dispatch('TargetIndexProperty');\n    }\n    private mouseOutButton () {\n        this.resetObj(store.state.HoverTargetIndex, 'updateStoreObj', 'HoverTargetIndex');\n        store.dispatch('TargetIndexProperty');\n    }\n    private resetObj (jsondata:GenericObject, commit: string, target: string) {\n        Object.keys(jsondata).forEach((obj: string, i: number) => {\n            store.commit(commit, { target: target, key: i, value: false });\n        });\n    }\n    private TargetIndexProperty() {\n      return store.state.EditingTargetIndex\n    }\n    private HoverIndexProperty() {\n      return store.state.HoverTargetIndex\n    }\n    private deleteElement(key: string) {\n        delete store.state.jsondata[key];\n        store.commit('setJsonData', store.state.jsondata);\n    }\n    private isLoading() {\n      return store.state.isLoading\n    }\n    private ModifyJsonFile (endpoint: string, filepath: string) {\n        store.dispatch('isLoading');\n        API.post (\n            endpoint,\n            {\n                fileData: store.state.jsondata,\n                filePath: filepath\n            },\n            (response: GenericObject) => {\n                console.log(response.data);\n            }\n        );\n    }\n\n    /***** html *****/\n    private setTagHeight (target: HTMLElement) {\n        this.textareaStyle = '';\n        if (!this.touchtag[\"isimg\"]) {\n            this.textareaStyle = `height: ${target.offsetHeight}px; margin-bottom: 0;`;\n        }\n    }\n    private setInputHeight (target: HTMLElement) {\n        target.style.height = 'auto';\n        if (!this.touchtag[\"isimg\"]) {\n            target.style.height = `${target.scrollHeight}px`;\n        }\n    }\n    private addButtonStyle (index: number) {\n        if (store.state.HoverTargetIndex[index]) {\n            return 'opacity:1; transition: all .5s;';\n        }\n        return 'opacity:0; transition: all .5s;';\n    }\n    private getPaddingClass(key: string, index: number) {\n        let classname = \"\";\n        const entries = Object.entries(store.state.jsondata);\n        if (0 < index) {\n            if (this.tag.getElementTagLabel(key) === 'for-p') {\n                classname = `p-${this.tag.getElementTagLabel( entries[index - 1][0])}`\n            } else {\n                classname = `div-${this.tag.getElementTagLabel(key)}`;\n            }\n        }\n        return classname;\n    }\n    private isImgTag (tagname: string) {\n        let wclass = this.tag.tagjson[tagname] ? this.tag.tagjson[tagname] : '';\n        let isimg = this.tag.tagjson[tagname] ? true : false;\n        return {\"isimg\": isimg, \"wclass\": wclass}\n    }\n    private displayArticleHTML (key: string, value: string) {\n        let prop = this.isImgTag(this.tag.getElementTagLabel(key));\n        return !prop[\"isimg\"] ? value : `<img src='${process.env.VUE_APP_website_path}${value}' class='${prop[\"wclass\"]}'>`;\n    }\n}\n</script>\n<style lang=\"scss\" scoped>\n.content-wrapper {\n    .editelem {\n        width: 100%;\n        float: left;\n        margin: 1rem .5rem;\n        position: relative;\n        div {\n            width: 98%;\n            textarea {\n                border: none;\n                background: rgb(0, 0, 0, 0.05);\n            }\n        }\n        div:not(.addcontent-wrapper) {\n            margin: 0 auto;\n            float: left;\n            width: 100%;\n            position: relative;\n        }\n    }\n    .editelem > * {\n        cursor: pointer;\n    }\n}\n.meta-label-wrapper {\n    textarea {\n        font-size: 1rem;\n        padding: .5rem 0 0 .5rem;\n        width: 100%;\n    }\n}\n.meta-setting-area {\n    margin: 1rem auto;\n    padding: 0 .5rem;\n    .meta-label-wrapper {\n        margin-bottom: 1rem;\n    }\n}\n.meta-setting-area .meta-label-wrapper,\n.meta-setting-area {\n    display: inline-block;\n    width: 100%;\n}\n\nh2,\n.for-h2 {\n    font-size: 1.5rem;\n    margin: 0 0 .5rem 0;\n}\n\nh3,\n.for-h3,\n.for-box-h3 {\n    font-size: 1.17rem;\n    margin: 0 0 .5rem 0;\n}\n\nh4,\n.for-h4 {\n    font-size: 1.05rem;\n    margin: 0 0 .5rem 0;\n}\n\np,\n.for-p,\n.for-box-description {\n    font-size: 1rem;\n    margin: 0 0 .5rem 0;\n}\n\n.p-for-h2 {\n    padding-left: 1rem;\n}\n.div-for-h3 {\n    padding-left: 1rem;\n}\n.p-for-h3 {\n    padding-left: 2rem;\n}\n.div-for-h4 {\n    padding-left: 2rem;\n}\n.p-for-h4 {\n    padding-left: 3rem;\n}\n.div-for-h5 {\n    padding-left: 3rem;\n}\n.p-for-h5 {\n    padding-left: 4rem;\n}\n.div-for-h6 {\n    padding-left: 4rem;\n}\n.p-for-h6 {\n    padding-left: 5rem;\n}\n.display-addbutton,\n.display-trash {\n    opacity: 1;\n}\n.hide-addbutton,\n.hide-trash {\n    opacity: 0;\n}\n.display-addbutton,\n.hide-addbutton,\n.display-trash,\n.hide-trash {\n    transition: all .3s;\n}\n.addcontentbutton,\n.addcontentbutton img {\n    cursor: pointer;\n}\n</style>","/templates/admin_vue/src/views/articleLists.vue",[],"/templates/admin_vue/src/components/Modal.vue",[],"/templates/admin_vue/src/components/icon/loadingIcon.vue",[],"/templates/admin_vue/src/module/prop.ts",[],"/templates/admin_vue/src/module/function.ts",[],"/templates/admin_vue/src/module/editMenu/index.ts",[],"/templates/admin_vue/src/views/categoryList.vue",["65","66"],"/templates/admin_vue/src/views/categoryDetail.vue",["67"],"/templates/admin_vue/src/views/commonInfo.vue",["68"],{"ruleId":"69","severity":1,"message":"70","line":299,"column":14,"nodeType":"71","messageId":"72","endLine":299,"endColumn":37},{"ruleId":"69","severity":1,"message":"70","line":312,"column":14,"nodeType":"71","messageId":"72","endLine":312,"endColumn":37},{"ruleId":"73","severity":1,"message":"74","line":182,"column":16,"nodeType":"75","messageId":"76","endLine":182,"endColumn":19,"suggestions":"77"},{"ruleId":"69","severity":1,"message":"70","line":230,"column":14,"nodeType":"71","messageId":"72","endLine":230,"endColumn":37},{"ruleId":"73","severity":1,"message":"74","line":39,"column":13,"nodeType":"75","messageId":"76","endLine":39,"endColumn":16,"suggestions":"78"},{"ruleId":"69","severity":1,"message":"70","line":191,"column":14,"nodeType":"71","messageId":"72","endLine":191,"endColumn":37},"@typescript-eslint/no-unused-vars","'response' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["79","80"],["81","82"],{"messageId":"83","fix":"84","desc":"85"},{"messageId":"86","fix":"87","desc":"88"},{"messageId":"83","fix":"89","desc":"85"},{"messageId":"86","fix":"90","desc":"88"},"suggestUnknown",{"range":"91","text":"92"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"91","text":"93"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"94","text":"92"},{"range":"94","text":"93"},[6924,6927],"unknown","never",[1397,1400]]